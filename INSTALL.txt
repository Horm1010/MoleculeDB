# INSTALL

## PRE-CONDITIONS

This project should work in a Linux machine with the Java 1.8 SDK. An example of this machine are the lab computers in PHO305/307.

Please keep in mind that running this on Windows and Mac OS may cause some IntelliJ working environment errors.

## SUPPORTING FILES (Overview)

This project uses 3 libraries from Maven: org.jheaps, org.jgrapht, and org.json. Instructions for how to install these libraries in IntelliJ are shown in the EXECUTE section.

There are 6 commands that can be entered in the command line:
md exit
md -addMolecule [fileName]
md -findMolecule [fileName]
md -findSubgraph [fileName]
md -findMostsimilar [fileName]
md gui (Note: Closing this window will terminate the session.)

Further Instructions are included in the EXECUTE SECTION.

Example tests that are in Main.java will run automatically, so there will be some statements that print before using the command line.

## EXECUTE (Running the project)

1. Choose a location or create a folder to clone the repository. Open up a terminal and "cd" to your location. To clone, type in the terminal:

git clone https://agile.bu.edu/bitbucket/scm/ec504proj/group8.git

2. In another terminal tab, open the IntelliJ IDE but typing

IntelliJ

3. Select import project, and find the "moleculeDB" folder that was cloned to your computer. Please select moleculeDB folder, NOT the group8 folder. Press OK to continue.

4. There's no need for any extra feature yet, so keep clicking next to continue. Please make sure you are using Java JDK 1.8.0.

5. On the top right, go to File > Project Structure > Global Libraries. Click the green plus sign in the middle column > "From maven..." to add a new global library.

6. In the search bar, type the following and press search (may take some seconds): 

org.jgrapht

7. Find and select "org.jgrapht:jgrapht-core:1.3.0" in the dropdown options and press OK to add.

8. Repeat steps 5 - 7 again (same search), but look for and add "org.jgrapht:jgrapht-io:1.3.0". 

9. Repeat steps 5 - 7 again with different search: 


org.json


and look for and add "org.json:json.20180813" in the dropdown options and press 'OK' to add. Select 'Apply' and then 'OK'. 

10. To exit out of the Project Structure window, press OK on the bottom right.

11. Build the project (Ctrl + F9).

12. Look through the project directory on the left side of the IDE, and find the Main.java file. Right click this file and select 'Run Main.main()'. 

12a. In the main script, the program first detects if there is a local "hashmap.ser" in the working directory. If there is not, then the program will connect to a remote server that will load a database of 10,000 molecules from PubChem. (NOTE: in case the remote server goes down, you can download the "hashmap.ser" that contains the 10,000 molecules at this Google Drive link: https://drive.google.com/open?id=12W1fOxAtDX3KeqgIAXKVLl1eSFVn5esS ). Put this file in the moleculeDB folder.  

12b. several molecule files have already been added to the database. There was also a search for the water molecule. 

13. There are example molecule text files for adding and searching in the moleculeDB folder. To add a molecule, type in the bottom command terminal:


md -addMolecule [text file name]


An example for adding water to the database:


md -addMolecule water.txt


14. To search for a molecule in the database, type in the bottom command terminal:


md -findMolecule [text file name]


An example for searching for water in the database:


md -findMolecule water.txt


15. To search for the most similar molecule in the database, type in the bottom command terminal:


md -findMostsimilar [text file name]


An example for searching for the molecule most similar to water:


md -findMostsimilar water.txt


16. To search the database for a specific subgraph, type in the bottom command terminal:


md -findSubgraph [text file name]


An example for searching all molecules in the database that have water as a subgraph:


md -findSubgraph water.txt


17. In order to open the GUI, type in the bottom command terminal:


md gui


This will lead to a window with 3 options: add and find a molecule (prompts you to select the txt file in the directory), as well as database statistics. 

18. To exit the program, type in the bottom command terminal:


md exit


This will save your data in a serialized HashMap file (called "hashmap.ser") that can be deserialized for the next database session.

# PUBCHEM DOWNLOAD (Extra feature):

1. You may edit in Main.java and add in the code below (NOTE: make sure this code is ABOVE the while loop if you want to download molecules before interacting with the command line. Also make sure you have a folder called "molecules" in moleculeDB):


dataCollector test = new dataCollector();
test.getMolecule(8);


These molecules are put in the folder "molecules", but if you want to use these molecules with our command line functions, please put these molecules in the moleculeDB folder. You can also run a for loop, as the input of getMolecule is a specific compound ID from PubChem (example: test.getMolecule(1) will get the first molecule in PubChem).